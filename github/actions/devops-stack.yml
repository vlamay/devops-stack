name: DevOps Stack CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run tfsec for Terraform security
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform/
          soft_fail: true

      - name: Run Checkov for infrastructure security
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          soft_fail: true

  # ============================================================================
  # BUILD AND TEST
  # ============================================================================
  build-test:
    runs-on: ubuntu-latest
    name: Build and Test
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --version

  # ============================================================================
  # INFRASTRUCTURE DEPLOYMENT
  # ============================================================================
  deploy-infrastructure:
    runs-on: ubuntu-latest
    name: Deploy Infrastructure
    needs: [security-scan, build-test]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Format
        run: terraform fmt -check
        working-directory: terraform/

      - name: Terraform Init
        run: terraform init
        working-directory: terraform/

      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform/

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: terraform/

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: terraform/

  # ============================================================================
  # APPLICATION DEPLOYMENT
  # ============================================================================
  deploy-application:
    runs-on: ubuntu-latest
    name: Deploy Application
    needs: [deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/
          kubectl rollout status deployment/nginx-deployment

      - name: Run smoke tests
        run: |
          kubectl get pods
          kubectl get services
          kubectl get ingress

  # ============================================================================
  # MONITORING AND ALERTS
  # ============================================================================
  monitoring:
    runs-on: ubuntu-latest
    name: Setup Monitoring
    needs: [deploy-application]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy Prometheus
        run: |
          kubectl apply -f monitoring/prometheus/
          kubectl rollout status deployment/prometheus

      - name: Deploy Grafana
        run: |
          kubectl apply -f monitoring/grafana/
          kubectl rollout status deployment/grafana

      - name: Setup alerts
        run: |
          kubectl apply -f monitoring/alerts/

  # ============================================================================
  # NOTIFICATION
  # ============================================================================
  notify:
    runs-on: ubuntu-latest
    name: Send Notifications
    needs: [monitoring]
    if: always()
    steps:
      - name: Notify Success
        if: needs.monitoring.result == 'success'
        run: |
          curl -X POST "${{ secrets.GOTIFY_URL }}/message" \
            -H "Content-Type: application/json" \
            -d '{
              "title": "Deployment Success",
              "message": "DevOps stack deployed successfully to production",
              "priority": 5
            }'

      - name: Notify Failure
        if: needs.monitoring.result == 'failure'
        run: |
          curl -X POST "${{ secrets.GOTIFY_URL }}/message" \
            -H "Content-Type: application/json" \
            -d '{
              "title": "Deployment Failed",
              "message": "DevOps stack deployment failed. Check logs for details.",
              "priority": 8
            }'
