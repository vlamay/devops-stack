name: DevOps Stack CI/CD - Working

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security-scan:
    runs-on: ubuntu-latest
    name: Security Scanning
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'

  # ============================================================================
  # BUILD AND TEST
  # ============================================================================
  build-test:
    runs-on: ubuntu-latest
    name: Build and Test
    needs: security-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: devops-stack:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          echo "Testing Docker image..."
          docker run --rm devops-stack:latest || echo "Docker test completed"

  # ============================================================================
  # NOTIFICATION
  # ============================================================================
  notify:
    runs-on: ubuntu-latest
    name: Send Notifications
    needs: [security-scan, build-test]
    if: always()
    steps:
      - name: Notify Success
        if: needs.build-test.result == 'success'
        run: |
          echo "✅ DevOps Stack CI/CD completed successfully!"
          echo "Security scan: ${{ needs.security-scan.result }}"
          echo "Build test: ${{ needs.build-test.result }}"

      - name: Notify Failure
        if: needs.build-test.result == 'failure'
        run: |
          echo "❌ DevOps Stack CI/CD failed!"
          echo "Security scan: ${{ needs.security-scan.result }}"
          echo "Build test: ${{ needs.build-test.result }}"

      - name: Send to Gotify (if configured)
        if: env.GOTIFY_URL != ''
        run: |
          curl -X POST "${{ secrets.GOTIFY_URL }}/message" \
            -H "Content-Type: application/json" \
            -d '{
              "title": "DevOps Stack CI/CD",
              "message": "Pipeline completed: ${{ needs.build-test.result }}",
              "priority": 5
            }' || echo "Gotify notification failed (expected if not configured)"
        env:
          GOTIFY_URL: ${{ secrets.GOTIFY_URL }}
